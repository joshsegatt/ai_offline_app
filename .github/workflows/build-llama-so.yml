name: build-llama-so
on: [workflow_dispatch]

env:
  ANDROID_API: 24
  ANDROID_ABI: arm64-v8a

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: Build llama.cpp for ANDROID (arm64, no curl)
        run: |
          set -e
          git clone --depth=1 https://github.com/ggerganov/llama.cpp.git
          cmake -S llama.cpp -B build-llama-android \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ env.ANDROID_ABI }} \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API }} \
            -DBUILD_SHARED_LIBS=ON \
            -DLLAMA_CURL=OFF -DGGML_CUDA=OFF -DGGML_OPENCL=OFF -DGGML_METAL=OFF -DGGML_BLAS=OFF
          cmake --build build-llama-android -j
          mkdir -p android/app/src/main/cpp/prebuilt/${{ env.ANDROID_ABI }}
          find build-llama-android -name \"libllama.so\" -print -exec cp {} android/app/src/main/cpp/prebuilt/${{ env.ANDROID_ABI }}/ \\;
          cp -r llama.cpp/include android/app/src/main/cpp/include

      - name: Ensure JNI sources exist (create stubs if missing)
        run: |
          set -e
          mkdir -p android/app/src/main/cpp
          if [ ! -f android/app/src/main/cpp/CMakeLists.txt ]; then
            cat > android/app/src/main/cpp/CMakeLists.txt <<'EOF'
cmake_minimum_required(VERSION 3.22)
project(llama_jni)
set(CMAKE_CXX_STANDARD 17)
add_library(llama SHARED IMPORTED)
set_target_properties(llama PROPERTIES
  IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/prebuilt/arm64-v8a/libllama.so)
add_library(bridge SHARED bridge.cpp)
target_include_directories(bridge PRIVATE ${CMAKE_SOURCE_DIR}/include)
target_link_libraries(bridge llama log)
EOF
          fi
          if [ ! -f android/app/src/main/cpp/bridge.cpp ]; then
            cat > android/app/src/main/cpp/bridge.cpp <<'EOF'
#include <jni.h>
extern \"C\" JNIEXPORT jboolean JNICALL
Java_com_example_app_LlamaBridge_init(JNIEnv*, jclass, jstring, jint, jint) { return JNI_TRUE; }
extern \"C\" JNIEXPORT jstring JNICALL
Java_com_example_app_LlamaBridge_predict(JNIEnv* env, jclass, jstring, jint, jdouble, jdouble, jint, jobjectArray) {
  return env->NewStringUTF(\"ok\");
}
extern \"C\" JNIEXPORT void JNICALL
Java_com_example_app_LlamaBridge_unload(JNIEnv*, jclass) {}
EOF
          fi
          echo \"----- TREE -----\"
          ls -R android/app/src/main/cpp || true

      - name: Build JNI bridge (arm64 via NDK)
        run: |
          set -e
          cd android
          cmake -S app/src/main/cpp -B app/src/main/cpp/build \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ env.ANDROID_ABI }} \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API }} \
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=app/src/main/cpp/build/out
          cmake --build app/src/main/cpp/build -j
          ls -R app/src/main/cpp/build/out || true

      - name: Upload artifacts (.so)
        uses: actions/upload-artifact@v4
        with:
          name: android-arm64-libs
          path: |
            android/app/src/main/cpp/prebuilt/${{ env.ANDROID_ABI }}/libllama.so
            android/app/src/main/cpp/build/out/libbridge.so