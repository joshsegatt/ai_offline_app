name: build-llama-so
on: [workflow_dispatch]

env:
  ANDROID_API: 24
  ANDROID_ABI: arm64-v8a

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }

      - name: Install NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: Build llama.cpp for ANDROID (arm64, no curl)
        run: |
          set -e
          git clone --depth=1 https://github.com/ggerganov/llama.cpp.git
          cmake -S llama.cpp -B build-llama-android \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ env.ANDROID_ABI }} \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API }} \
            -DBUILD_SHARED_LIBS=ON \
            -DLLAMA_CURL=OFF \
            -DGGML_CUDA=OFF -DGGML_OPENCL=OFF -DGGML_METAL=OFF -DGGML_BLAS=OFF
          cmake --build build-llama-android -j
          mkdir -p android/app/src/main/cpp/prebuilt/${{ env.ANDROID_ABI }}
          find build-llama-android -name "libllama.so" -print -exec cp {} android/app/src/main/cpp/prebuilt/${{ env.ANDROID_ABI }}/ \;
          cp -r llama.cpp/include android/app/src/main/cpp/include

      - name: Build JNI bridge (arm64 via NDK)
        run: |
          set -e
          cd android
          cmake -S app/src/main/cpp -B app/src/main/cpp/build \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ env.ANDROID_ABI }} \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API }} \
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=app/src/main/cpp/build/out
          cmake --build app/src/main/cpp/build -j
          ls -R app/src/main/cpp/build/out || true

      - name: Upload artifacts (.so)
        uses: actions/upload-artifact@v4
        with:
          name: android-arm64-libs
          path: |
            android/app/src/main/cpp/prebuilt/${{ env.ANDROID_ABI }}/libllama.so
            android/app/src/main/cpp/build/out/libbridge.so